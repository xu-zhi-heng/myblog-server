<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sweetfun.dao.CommentFeedBackDao">
    <resultMap id="BaseResultMap" type="com.sweetfun.domain.CommentFeedBacks">
        <id column="id" jdbcType="INTEGER" property="id"></id>
        <result column="content" jdbcType="VARCHAR" property="content"></result>
        <result column="user_id" jdbcType="INTEGER" property="userId"></result>
        <result column="comment_id" jdbcType="INTEGER" property="commentId"></result>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"></result>
        <result column="support_num" jdbcType="INTEGER" property="supportNum"></result>
        <result column="against_num" jdbcType="INTEGER" property="againstNum"></result>
        <result column="status" jdbcType="INTEGER" property="status"></result>
    </resultMap>

    <sql id="Base_Column_List">
        select id,content,user_id,comment_id,create_time,support_num,against_num,status
    </sql>

    <select id="findAll" resultType="java.util.HashMap">
        select f.id, f.content, f.create_time, f.support_num, f.against_num, f.status, f.user_id, f.comment_id,
        u.username,
        c.blogIntroduction_id,
        i.title
        from myblog.comment_feedback as f
        left join myblog.user as u
        on f.user_id = u.id
        left join myblog.comments as c
        on c.id = f.comment_id
        inner join myblog.blog_introduction as i
        on i.id = c.blogIntroduction_id
    </select>



    <select id="findAllByCommentId" resultType="java.util.HashMap" parameterType="java.lang.Integer">
        select f.id, f.content, f.create_time, f.support_num, f.against_num, f.status, f.user_id, f.comment_id,
        u.username,
        c.blogIntroduction_id,
        i.title
        from myblog.comment_feedback as f
        left join myblog.user as u
        on f.user_id = u.id
        left join myblog.comments as c
        on c.id = f.comment_id
        inner join myblog.blog_introduction as i
        on i.id = c.blogIntroduction_id
        where f.comment_id = #{commentId}
    </select>

    <update id="updateById" parameterType="com.sweetfun.domain.CommentFeedBacks">
        update comment_feedback
        <set>
            <if test="content != null">
                content = #{content},
            </if>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="commentId != null">
                comment_id = #{commentId},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="supportNum != null">
                support_num = #{supportNum},
            </if>
            <if test="againstNum != null">
                against_num = #{againstNum},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
        </set>
        where id = #{id}
    </update>


    <select id="findByTime" resultType="java.util.HashMap" parameterType="java.lang.String">
        select f.id, f.content, f.create_time, f.support_num, f.against_num, f.status, f.user_id, f.comment_id,
        u.username,
        c.blogIntroduction_id,
        i.title
        from myblog.comment_feedback as f
        left join myblog.user as u
        on f.user_id = u.id
        left join myblog.comments as c
        on c.id = f.comment_id
        inner join myblog.blog_introduction as i
        on i.id = c.blogIntroduction_id
        where f.create_time BETWEEN #{createTime} and #{endTime}
    </select>

    <insert id="saveFeedBack" parameterType="com.sweetfun.domain.CommentFeedBacks">
        insert into myblog.comment_feedback
        <trim prefix="(" suffix=")" suffixOverrides=",">
            content,
            user_id,
            comment_id,
            create_time,
            support_num,
            against_num,
            status
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{content},
            #{userId},
            #{commentId},
            now(),
            0,
            0,
            #{status}
        </trim>
    </insert>

</mapper>